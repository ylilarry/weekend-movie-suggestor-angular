AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  weekend-movie-suggestor

  Sample SAM Template for weekend-movie-suggestor

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60
    MemorySize: 128

Parameters:
  GatewayHostNameV2:
    Type: String
    Default: "api.weekend-movie.yuli.se"

Resources:
  GenerateCertificateV2: # Creates a valid certificate for the HTTP API endpoint under the custom domain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref GatewayHostNameV2
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref GatewayHostNameV2
          HostedZoneId: Z05194391W6Y9W8QD3I1E

  APIGatewayV2:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        DomainName: !Ref GatewayHostNameV2
        CertificateArn: !Ref GenerateCertificateV2
        Route53:
          HostedZoneId: Z05194391W6Y9W8QD3I1E
      # AccessLogSettings:
      #   DestinationArn: !GetAtt APIGatewayV2AccessLogs.Arn
      #   Format: $context.requestId $context.httpMethod $context.path $context.error.responseType $context.error.messageString $context.authorizer.error $context.integrationErrorMessage
      Auth: # Uses the FirebaseTokenAuthorizer to identify the session user.
        DefaultAuthorizer: AWS_IAM
        EnableIamAuthorizer: true
      CorsConfiguration:
        AllowMethods: ["*"]
        AllowHeaders: ["*"]
        AllowOrigins:
          - "http://localhost:4200"
          - "https://weekend-movie-angular.yuli.se"
      DisableExecuteApiEndpoint: True

  ChatServer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: chat/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            ApiId: !Ref APIGatewayV2
            Path: /chat
            Method: POST
            Auth:
              Authorizer: NONE
      Policies:
        - AWSLambdaRole
        - AmazonSSMReadOnlyAccess

  MovieServer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: movie/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            ApiId: !Ref APIGatewayV2
            Path: /movie
            Method: POST
            Auth:
              Authorizer: NONE
      Policies:
        - AWSLambdaRole
        - AmazonSSMReadOnlyAccess
# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   HelloWorldAPI:
#     Description: "API Gateway endpoint URL for Prod environment for First Function"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   HelloWorldFunction:
#     Description: "First Lambda Function ARN"
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: "Implicit IAM Role created for Hello World function"
#     Value: !GetAtt HelloWorldFunctionRole.Arn
